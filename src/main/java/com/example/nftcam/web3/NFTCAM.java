package com.example.nftcam.web3;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class NFTCAM extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b5060405162003545380380620035458339818101604052810190620000379190620002f0565b818181600090816200004a9190620005c0565b5080600190816200005c9190620005c0565b5050506200007f620000736200008f60201b60201c565b6200009760201b60201c565b60006008819055505050620006a7565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001c6826200017b565b810181811067ffffffffffffffff82111715620001e857620001e76200018c565b5b80604052505050565b6000620001fd6200015d565b90506200020b8282620001bb565b919050565b600067ffffffffffffffff8211156200022e576200022d6200018c565b5b62000239826200017b565b9050602081019050919050565b60005b838110156200026657808201518184015260208101905062000249565b60008484015250505050565b600062000289620002838462000210565b620001f1565b905082815260208101848484011115620002a857620002a762000176565b5b620002b584828562000246565b509392505050565b600082601f830112620002d557620002d462000171565b5b8151620002e784826020860162000272565b91505092915050565b600080604083850312156200030a576200030962000167565b5b600083015167ffffffffffffffff8111156200032b576200032a6200016c565b5b6200033985828601620002bd565b925050602083015167ffffffffffffffff8111156200035d576200035c6200016c565b5b6200036b85828601620002bd565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003c857607f821691505b602082108103620003de57620003dd62000380565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004487fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000409565b62000454868362000409565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004a16200049b62000495846200046c565b62000476565b6200046c565b9050919050565b6000819050919050565b620004bd8362000480565b620004d5620004cc82620004a8565b84845462000416565b825550505050565b600090565b620004ec620004dd565b620004f9818484620004b2565b505050565b5b81811015620005215762000515600082620004e2565b600181019050620004ff565b5050565b601f82111562000570576200053a81620003e4565b6200054584620003f9565b8101602085101562000555578190505b6200056d6200056485620003f9565b830182620004fe565b50505b505050565b600082821c905092915050565b6000620005956000198460080262000575565b1980831691505092915050565b6000620005b0838362000582565b9150826002028217905092915050565b620005cb8262000375565b67ffffffffffffffff811115620005e757620005e66200018c565b5b620005f38254620003af565b6200060082828562000525565b600060209050601f83116001811462000638576000841562000623578287015190505b6200062f8582620005a2565b8655506200069f565b601f1984166200064886620003e4565b60005b8281101562000672578489015182556001820191506020850194506020810190506200064b565b868310156200069257848901516200068e601f89168262000582565b8355505b6001600288020188555050505b505050505050565b612e8e80620006b76000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063b88d4fde11610071578063b88d4fde146102a4578063c87b56dd146102c0578063e985e9c5146102f0578063eacabe1414610320578063f2fde38b1461033c5761010b565b8063715018a6146102425780638da5cb5b1461024c57806395d89b411461026a578063a22cb465146102885761010b565b806323b872dd116100de57806323b872dd146101aa57806342842e0e146101c65780636352211e146101e257806370a08231146102125761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a60048036038101906101259190611c1c565b610358565b6040516101379190611c64565b60405180910390f35b61014861043a565b6040516101559190611d0f565b60405180910390f35b61017860048036038101906101739190611d67565b6104cc565b6040516101859190611dd5565b60405180910390f35b6101a860048036038101906101a39190611e1c565b610512565b005b6101c460048036038101906101bf9190611e5c565b610629565b005b6101e060048036038101906101db9190611e5c565b610689565b005b6101fc60048036038101906101f79190611d67565b6106a9565b6040516102099190611dd5565b60405180910390f35b61022c60048036038101906102279190611eaf565b61072f565b6040516102399190611eeb565b60405180910390f35b61024a6107e6565b005b6102546107fa565b6040516102619190611dd5565b60405180910390f35b610272610824565b60405161027f9190611d0f565b60405180910390f35b6102a2600480360381019061029d9190611f32565b6108b6565b005b6102be60048036038101906102b991906120a7565b6108cc565b005b6102da60048036038101906102d59190611d67565b61092e565b6040516102e79190611d0f565b60405180910390f35b61030a6004803603810190610305919061212a565b610a40565b6040516103179190611c64565b60405180910390f35b61033a6004803603810190610335919061220b565b610ad4565b005b61035660048036038101906103519190611eaf565b610b46565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061042357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610433575061043282610bc9565b5b9050919050565b60606000805461044990612296565b80601f016020809104026020016040519081016040528092919081815260200182805461047590612296565b80156104c25780601f10610497576101008083540402835291602001916104c2565b820191906000526020600020905b8154815290600101906020018083116104a557829003601f168201915b5050505050905090565b60006104d782610c33565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061051d826106a9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361058d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058490612339565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105ac610c7e565b73ffffffffffffffffffffffffffffffffffffffff1614806105db57506105da816105d5610c7e565b610a40565b5b61061a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610611906123cb565b60405180910390fd5b6106248383610c86565b505050565b61063a610634610c7e565b82610d3f565b610679576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106709061245d565b60405180910390fd5b610684838383610dd4565b505050565b6106a4838383604051806020016040528060008152506108cc565b505050565b6000806106b5836110cd565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071d906124c9565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361079f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107969061255b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107ee61110a565b6107f86000611188565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461083390612296565b80601f016020809104026020016040519081016040528092919081815260200182805461085f90612296565b80156108ac5780601f10610881576101008083540402835291602001916108ac565b820191906000526020600020905b81548152906001019060200180831161088f57829003601f168201915b5050505050905090565b6108c86108c1610c7e565b838361124e565b5050565b6108dd6108d7610c7e565b83610d3f565b61091c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109139061245d565b60405180910390fd5b610928848484846113ba565b50505050565b606061093982610c33565b600060066000848152602001908152602001600020805461095990612296565b80601f016020809104026020016040519081016040528092919081815260200182805461098590612296565b80156109d25780601f106109a7576101008083540402835291602001916109d2565b820191906000526020600020905b8154815290600101906020018083116109b557829003601f168201915b5050505050905060006109e3611416565b905060008151036109f8578192505050610a3b565b600082511115610a2d578082604051602001610a159291906125b7565b60405160208183030381529060405292505050610a3b565b610a368461142d565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610adc61110a565b6001600854610aeb919061260a565b600881905550610afd82600854611495565b610b09600854826114b3565b7f07883703ed0e86588a40d76551c92f8a4b329e3bf19765e0e6749473c1a84665600854604051610b3a9190611eeb565b60405180910390a15050565b610b4e61110a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb4906126b0565b60405180910390fd5b610bc681611188565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610c3c81611520565b610c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c72906124c9565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610cf9836106a9565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610d4b836106a9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d8d5750610d8c8185610a40565b5b80610dcb57508373ffffffffffffffffffffffffffffffffffffffff16610db3846104cc565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610df4826106a9565b73ffffffffffffffffffffffffffffffffffffffff1614610e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4190612742565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb0906127d4565b60405180910390fd5b610ec68383836001611561565b8273ffffffffffffffffffffffffffffffffffffffff16610ee6826106a9565b73ffffffffffffffffffffffffffffffffffffffff1614610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3390612742565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46110c88383836001611567565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611112610c7e565b73ffffffffffffffffffffffffffffffffffffffff166111306107fa565b73ffffffffffffffffffffffffffffffffffffffff1614611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117d90612840565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b3906128ac565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113ad9190611c64565b60405180910390a3505050565b6113c5848484610dd4565b6113d18484848461156d565b611410576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114079061293e565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061143882610c33565b6000611442611416565b90506000815111611462576040518060200160405280600081525061148d565b8061146c846116f4565b60405160200161147d9291906125b7565b6040516020818303038152906040525b915050919050565b6114af8282604051806020016040528060008152506117c2565b5050565b6114bc82611520565b6114fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f2906129d0565b60405180910390fd5b8060066000848152602001908152602001600020908161151b9190612b9c565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff16611542836110cd565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b600061158e8473ffffffffffffffffffffffffffffffffffffffff1661181d565b156116e7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026115b7610c7e565b8786866040518563ffffffff1660e01b81526004016115d99493929190612cc3565b6020604051808303816000875af192505050801561161557506040513d601f19601f820116820180604052508101906116129190612d24565b60015b611697573d8060008114611645576040519150601f19603f3d011682016040523d82523d6000602084013e61164a565b606091505b50600081510361168f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116869061293e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506116ec565b600190505b949350505050565b60606000600161170384611840565b01905060008167ffffffffffffffff81111561172257611721611f7c565b5b6040519080825280601f01601f1916602001820160405280156117545781602001600182028036833780820191505090505b509050600082602001820190505b6001156117b7578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816117ab576117aa612d51565b5b04945060008503611762575b819350505050919050565b6117cc8383611993565b6117d9600084848461156d565b611818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180f9061293e565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061189e577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161189457611893612d51565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106118db576d04ee2d6d415b85acef810000000083816118d1576118d0612d51565b5b0492506020810190505b662386f26fc10000831061190a57662386f26fc100008381611900576118ff612d51565b5b0492506010810190505b6305f5e1008310611933576305f5e100838161192957611928612d51565b5b0492506008810190505b612710831061195857612710838161194e5761194d612d51565b5b0492506004810190505b6064831061197b576064838161197157611970612d51565b5b0492506002810190505b600a831061198a576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f990612dcc565b60405180910390fd5b611a0b81611520565b15611a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4290612e38565b60405180910390fd5b611a59600083836001611561565b611a6281611520565b15611aa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9990612e38565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611bac600083836001611567565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611bf981611bc4565b8114611c0457600080fd5b50565b600081359050611c1681611bf0565b92915050565b600060208284031215611c3257611c31611bba565b5b6000611c4084828501611c07565b91505092915050565b60008115159050919050565b611c5e81611c49565b82525050565b6000602082019050611c796000830184611c55565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611cb9578082015181840152602081019050611c9e565b60008484015250505050565b6000601f19601f8301169050919050565b6000611ce182611c7f565b611ceb8185611c8a565b9350611cfb818560208601611c9b565b611d0481611cc5565b840191505092915050565b60006020820190508181036000830152611d298184611cd6565b905092915050565b6000819050919050565b611d4481611d31565b8114611d4f57600080fd5b50565b600081359050611d6181611d3b565b92915050565b600060208284031215611d7d57611d7c611bba565b5b6000611d8b84828501611d52565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dbf82611d94565b9050919050565b611dcf81611db4565b82525050565b6000602082019050611dea6000830184611dc6565b92915050565b611df981611db4565b8114611e0457600080fd5b50565b600081359050611e1681611df0565b92915050565b60008060408385031215611e3357611e32611bba565b5b6000611e4185828601611e07565b9250506020611e5285828601611d52565b9150509250929050565b600080600060608486031215611e7557611e74611bba565b5b6000611e8386828701611e07565b9350506020611e9486828701611e07565b9250506040611ea586828701611d52565b9150509250925092565b600060208284031215611ec557611ec4611bba565b5b6000611ed384828501611e07565b91505092915050565b611ee581611d31565b82525050565b6000602082019050611f006000830184611edc565b92915050565b611f0f81611c49565b8114611f1a57600080fd5b50565b600081359050611f2c81611f06565b92915050565b60008060408385031215611f4957611f48611bba565b5b6000611f5785828601611e07565b9250506020611f6885828601611f1d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fb482611cc5565b810181811067ffffffffffffffff82111715611fd357611fd2611f7c565b5b80604052505050565b6000611fe6611bb0565b9050611ff28282611fab565b919050565b600067ffffffffffffffff82111561201257612011611f7c565b5b61201b82611cc5565b9050602081019050919050565b82818337600083830152505050565b600061204a61204584611ff7565b611fdc565b90508281526020810184848401111561206657612065611f77565b5b612071848285612028565b509392505050565b600082601f83011261208e5761208d611f72565b5b813561209e848260208601612037565b91505092915050565b600080600080608085870312156120c1576120c0611bba565b5b60006120cf87828801611e07565b94505060206120e087828801611e07565b93505060406120f187828801611d52565b925050606085013567ffffffffffffffff81111561211257612111611bbf565b5b61211e87828801612079565b91505092959194509250565b6000806040838503121561214157612140611bba565b5b600061214f85828601611e07565b925050602061216085828601611e07565b9150509250929050565b600067ffffffffffffffff82111561218557612184611f7c565b5b61218e82611cc5565b9050602081019050919050565b60006121ae6121a98461216a565b611fdc565b9050828152602081018484840111156121ca576121c9611f77565b5b6121d5848285612028565b509392505050565b600082601f8301126121f2576121f1611f72565b5b813561220284826020860161219b565b91505092915050565b6000806040838503121561222257612221611bba565b5b600061223085828601611e07565b925050602083013567ffffffffffffffff81111561225157612250611bbf565b5b61225d858286016121dd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806122ae57607f821691505b6020821081036122c1576122c0612267565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612323602183611c8a565b915061232e826122c7565b604082019050919050565b6000602082019050818103600083015261235281612316565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006123b5603d83611c8a565b91506123c082612359565b604082019050919050565b600060208201905081810360008301526123e4816123a8565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612447602d83611c8a565b9150612452826123eb565b604082019050919050565b600060208201905081810360008301526124768161243a565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006124b3601883611c8a565b91506124be8261247d565b602082019050919050565b600060208201905081810360008301526124e2816124a6565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612545602983611c8a565b9150612550826124e9565b604082019050919050565b6000602082019050818103600083015261257481612538565b9050919050565b600081905092915050565b600061259182611c7f565b61259b818561257b565b93506125ab818560208601611c9b565b80840191505092915050565b60006125c38285612586565b91506125cf8284612586565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061261582611d31565b915061262083611d31565b9250828201905080821115612638576126376125db565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061269a602683611c8a565b91506126a58261263e565b604082019050919050565b600060208201905081810360008301526126c98161268d565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061272c602583611c8a565b9150612737826126d0565b604082019050919050565b6000602082019050818103600083015261275b8161271f565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006127be602483611c8a565b91506127c982612762565b604082019050919050565b600060208201905081810360008301526127ed816127b1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061282a602083611c8a565b9150612835826127f4565b602082019050919050565b600060208201905081810360008301526128598161281d565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612896601983611c8a565b91506128a182612860565b602082019050919050565b600060208201905081810360008301526128c581612889565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612928603283611c8a565b9150612933826128cc565b604082019050919050565b600060208201905081810360008301526129578161291b565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006129ba602e83611c8a565b91506129c58261295e565b604082019050919050565b600060208201905081810360008301526129e9816129ad565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612a527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a15565b612a5c8683612a15565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612a99612a94612a8f84611d31565b612a74565b611d31565b9050919050565b6000819050919050565b612ab383612a7e565b612ac7612abf82612aa0565b848454612a22565b825550505050565b600090565b612adc612acf565b612ae7818484612aaa565b505050565b5b81811015612b0b57612b00600082612ad4565b600181019050612aed565b5050565b601f821115612b5057612b21816129f0565b612b2a84612a05565b81016020851015612b39578190505b612b4d612b4585612a05565b830182612aec565b50505b505050565b600082821c905092915050565b6000612b7360001984600802612b55565b1980831691505092915050565b6000612b8c8383612b62565b9150826002028217905092915050565b612ba582611c7f565b67ffffffffffffffff811115612bbe57612bbd611f7c565b5b612bc88254612296565b612bd3828285612b0f565b600060209050601f831160018114612c065760008415612bf4578287015190505b612bfe8582612b80565b865550612c66565b601f198416612c14866129f0565b60005b82811015612c3c57848901518255600182019150602085019450602081019050612c17565b86831015612c595784890151612c55601f891682612b62565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000612c9582612c6e565b612c9f8185612c79565b9350612caf818560208601611c9b565b612cb881611cc5565b840191505092915050565b6000608082019050612cd86000830187611dc6565b612ce56020830186611dc6565b612cf26040830185611edc565b8181036060830152612d048184612c8a565b905095945050505050565b600081519050612d1e81611bf0565b92915050565b600060208284031215612d3a57612d39611bba565b5b6000612d4884828501612d0f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612db6602083611c8a565b9150612dc182612d80565b602082019050919050565b60006020820190508181036000830152612de581612da9565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612e22601c83611c8a565b9150612e2d82612dec565b602082019050919050565b60006020820190508181036000830152612e5181612e15565b905091905056fea26469706673582212202854a5071b75ad6cddb81f4b82dc358b2941dc1b0adb42017b9f460710138b1664736f6c63430008120033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTNFT = "mintNFT";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MINT_EVENT = new Event("Mint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected NFTCAM(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NFTCAM(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NFTCAM(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NFTCAM(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MINT_EVENT, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.param0 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintEventResponse> mintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MintEventResponse>() {
            @Override
            public MintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MINT_EVENT, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.log = log;
                typedResponse.param0 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintEventResponse> mintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINT_EVENT));
        return mintEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintNFT(String recipient, String tokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static NFTCAM load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTCAM(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NFTCAM load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTCAM(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NFTCAM load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NFTCAM(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NFTCAM load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NFTCAM(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NFTCAM> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _name, String _symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol)));
        return deployRemoteCall(NFTCAM.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<NFTCAM> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _name, String _symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol)));
        return deployRemoteCall(NFTCAM.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NFTCAM> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol)));
        return deployRemoteCall(NFTCAM.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NFTCAM> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol)));
        return deployRemoteCall(NFTCAM.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class MintEventResponse extends BaseEventResponse {
        public BigInteger param0;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
